{"ast":null,"code":"var _jsxFileName = \"/Users/jameswaller/2020-portfolio/pages/about.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useSWR from 'swr';\n\nvar fetcher = function fetcher(query) {\n  return fetch('/api/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: query\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (json) {\n    return json.data;\n  });\n};\n\nexport default function Index() {\n  var _this = this;\n\n  var _useSWR = useSWR('{ users { name } }', fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }\n  }, \"Failed to load\");\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 21\n    }\n  }, \"Loading...\");\n  var users = data.users;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, users.map(function (user, i) {\n    return __jsx(\"div\", {\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }, user.name);\n  }));\n}","map":{"version":3,"sources":["/Users/jameswaller/2020-portfolio/pages/about.js"],"names":["useSWR","fetcher","query","fetch","method","headers","body","JSON","stringify","then","res","json","data","Index","error","users","map","user","i","name"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK;AAAA,SACnBC,KAAK,CAAC,cAAD,EAAiB;AACpBC,IAAAA,MAAM,EAAE,MADY;AAEpBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFW;AAKpBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,MAAAA,KAAK,EAALA;AAAF,KAAf;AALc,GAAjB,CAAL,CAOGO,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,EAQGF,IARH,CAQQ,UAAAE,IAAI;AAAA,WAAIA,IAAI,CAACC,IAAT;AAAA,GARZ,CADmB;AAAA,CAArB;;AAWA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAAA,gBACNb,MAAM,CAAC,oBAAD,EAAuBC,OAAvB,CADA;AAAA,MACtBW,IADsB,WACtBA,IADsB;AAAA,MAChBE,KADgB,WAChBA,KADgB;;AAG9B,MAAIA,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACX,MAAI,CAACF,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAJmB,MAMtBG,KANsB,GAMZH,IANY,CAMtBG,KANsB;AAQ9B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP;AAAA,WACT;AAAK,MAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAcD,IAAI,CAACE,IAAnB,CADS;AAAA,GAAV,CADH,CADF;AAOD","sourcesContent":["import useSWR from 'swr'\n\nconst fetcher = query =>\n  fetch('/api/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify({ query }),\n  })\n    .then(res => res.json())\n    .then(json => json.data)\n\nexport default function Index() {\n  const { data, error } = useSWR('{ users { name } }', fetcher)\n\n  if (error) return <div>Failed to load</div>\n  if (!data) return <div>Loading...</div>\n\n  const { users } = data\n\n  return (\n    <div>\n      {users.map((user, i) => (\n        <div key={i}>{user.name}</div>\n      ))}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}